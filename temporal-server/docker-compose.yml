version: "3.5"
services:
  elasticsearch:
    container_name: temporal-elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    networks:
      - temporal-network
    expose:
      - 9200
    volumes:
      - ./data/elasticsearch/:/var/lib/elasticsearch/data
  postgresql:
    container_name: ${POSTGRES_HOST}
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    image: postgres:${POSTGRESQL_VERSION}
    networks:
      - temporal-network
    ports:
      - 5455:${POSTGRES_PORT}
    volumes:
      - /var/lib/postgresql/data
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - 15455:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - postgresql
    networks:
      - temporal-network
    volumes:
      - ./data/pgadmin/:/var/lib/pgadmin/
  temporal:
    container_name: temporal
    depends_on:
      - postgresql
      - elasticsearch
    environment:
      - DB=postgresql
      - DB_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    networks:
      - temporal-network
    ports:
      - 7233:7233
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    networks:
      - temporal-network
    stdin_open: true
    tty: true
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
      - TEMPORAL_NOTIFY_ON_NEW_VERSION=false
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    networks:
      - temporal-network
    ports:
      - 8080:8080
  temporalairlinesconcept.api:
    container_name: temporalairlinesconcept.api
    build:
      context: ./../
      dockerfile: TemporalAirlinesConcept.Api/Dockerfile
    ports:
      - 5222:5050
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5050
      - DATABASESETTINGS__CONNECTIONSTRING=${CONNECTION_STRING}
    depends_on:
      - temporal
      - postgresql
    networks:
      - temporal-network
    volumes:
          - ./test-results:/app/TestResults  # Mount the volume to access test results
  temporalairlinesconcept.web:
    container_name: temporalairlinesconcept.web
    build:
      context: ./../
      dockerfile: TemporalAirlinesConcept.Web/Dockerfile
    ports:
      - 5223:5050
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5050
      - DATABASESETTINGS__CONNECTIONSTRING=${CONNECTION_STRING}
    depends_on:
      - temporal
      - postgresql
      - temporalairlinesconcept.api # let api project run database migrations first
    networks:
      - temporal-network

networks:
  temporal-network:
    driver: bridge
    name: temporal-network
